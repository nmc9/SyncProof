<?php

namespace Tests;

use App\Models\Remote\RemoteCompany;
use App\Models\Remote\RemoteCustomer;
use App\Models\Remote\RemoteDevice;
use App\Models\Remote\RemoteImage;
use App\Models\Remote\RemoteInventory;
use App\Models\Remote\RemoteInventoryNew;
use App\Models\Remote\RemoteInventoryUsed;
use App\Models\Remote\RemoteMeter;
use App\Models\Remote\RemoteOperation;
use App\Models\Remote\RemoteUser;
use App\Models\Remote\RemoteWorkorder;
use App\Models\Remote\RemoteWorkordersNew;
use Carbon\Carbon;
use Orchestra\Testbench\TestCase;
use Tests\TestCase as BaseTestCase;


abstract class TestProofCase.bak extends TestCase
{

	protected function getEnvironmentSetUp($app){
		parent::setup();
		$app['config']->set('database.default', 'remote');
		$app['config']->set('database.connections.remote', [
			'driver'   => 'sqlite',
			'database' => ':memory:',
			'prefix'   => 'remote',
		]);
		$app['config']->set('database.connections.local', [
			'driver'   => 'sqlite',
			'database' => ':memory:',
			'prefix'   => 'local',
		]);
	}

	public function seedRemote(){
		return (new \RemoteSeeder())->run();
	}

	public function seedLocal(){
		return (new \LocalSeeder())->run();
	}

	protected function selectAll($companyno,$RemoteModel,$lastSync = null){
		$query = (new $RemoteModel)->withTrashed()->where("companyno",$companyno);
		if($lastSync != null){
			$query->where('updated_at',">",$lastSync);
		}
		return $query->get();
	}

	protected function timePasses(){
		Carbon::setTestNow(Carbon::now()->addDays(1));
	}

	protected function assertDatabaseHasBoth($table,$compare){
		$compare1 = array_merge($compare,["deleted_at" => null]);
		$this->assertDatabaseHas($table,$compare1,'remote');

		unset($compare["deleted_at"]);
		$this->assertDatabaseHas($table,$compare,'local');
	}

	protected function assertDatabaseDeleteBoth($table,$compare,$deleted_at){
		$compare1 = array_merge($compare,["deleted_at" => $deleted_at]);
		$this->assertDatabaseHas($table,$compare1,'remote');

		unset($compare["deleted_at"]);
		$this->assertDatabaseMissing($table,$compare,'local');
	}

	public function assertCountBoth($count,$remote,$local){
		$this->assertCount($count,$remote);
		$this->assertCount($count,$local);
	}
}
